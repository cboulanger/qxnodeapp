{"ts":1344165797928,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/*!\n * Connect - cookieParser\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar utils = require('./../utils')\n  , cookie = require('cookie');\n\n/**\n * Cookie parser:\n *\n * Parse _Cookie_ header and populate `req.cookies`\n * with an object keyed by the cookie names. Optionally\n * you may enabled signed cookie support by passing\n * a `secret` string, which assigns `req.secret` so\n * it may be used by other middleware.\n *\n * Examples:\n *\n *     connect()\n *       .use(connect.cookieParser('optional secret string'))\n *       .use(function(req, res, next){\n *         res.end(JSON.stringify(req.cookies));\n *       })\n *\n * @param {String} secret\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function cookieParser(secret){\n  return function cookieParser(req, res, next) {\n    if (req.cookies) return next();\n    var cookies = req.headers.cookie;\n\n    req.secret = secret;\n    req.cookies = {};\n    req.signedCookies = {};\n\n    if (cookies) {\n      try {\n        req.cookies = cookie.parse(cookies);\n        if (secret) {\n          req.signedCookies = utils.parseSignedCookies(req.cookies, secret);\n          var obj = utils.parseJSONCookies(req.signedCookies);\n          req.signedCookies = obj;\n        }\n        req.cookies = utils.parseJSONCookies(req.cookies);\n      } catch (err) {\n        return next(err);\n      }\n    }\n    next();\n  };\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":1439}]],"length":1439}
