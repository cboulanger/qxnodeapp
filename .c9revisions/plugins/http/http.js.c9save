{"ts":1343663873141,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// This plugin gives provides a connect server for the application\n\n// @options is the object in the config.js file for this plugin.\n//   @options.port is the port to listen on.\n//   @options.host is the host to bind to \n//   @options.root is the directory from which to serve static files\n// @imports is the various services that this plugin declared as dependencies\n//   This plugin doesn't have any\n// @register is a callback function expecting (err, plugin) where plugin is the\n// provided services and lifecycle hooks.  This plugin exports \"http\".\n\nmodule.exports = function setup(options, imports, register) \n{    \n    // dependencies\n    var connect = require(\"connect\");\n    var assert  = require(\"assert\");\n    var path    = require(\"path\");\n    \n    // options/parameters\n    var host = options.host || process.env.IP;\n    var port = options.port || process.env.PORT;\n    var root = options.root;\n    assert(root && typeof root==\"string\", \"You must provide a document root for the http server\");\n    \n    // create server and register with architect when done\n    var server = connect().use(connect['static'](root));\n    server.listen(port, host, function (err) {\n        if (err) return register(err);\n        console.log(\"Connect server listening on http://%s:%s, serving %s\", host, port, root);\n        register(null, {\n            // When a plugin is unloaded, it's onDestruct function will be called if there is one.\n            onDestruct: function (callback) {\n                server.close(callback);\n            },\n            // API\n            http: { \n                server : server\n            }\n        });\n    });\n}"]],"start1":0,"start2":0,"length1":0,"length2":1640}]],"length":1640}
